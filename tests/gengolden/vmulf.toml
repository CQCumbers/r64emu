input_desc = [
  "v128:accum_lo",
  "v128:accum_md",
  "v128:accum_hi",
  "v128:v0",
  "v128:v1",
]

output_desc = [
  "v128:res",
  "v128:accum_lo",
  "v128:accum_md",
  "v128:accum_hi",
  "u32:vco",
  "u32:vcc",
  "u32:vce",
  "u32:padding",
]


rsp_code = """
  li a0,$0
  li a1,$800

  lqv v2[e0],$00(a0) // $00: ACCUM LO
  vsar v8,v2,v0[e10]
  lqv v1[e0],$10(a0) // $10: ACCUM MD
  vsar v8,v1,v0[e9]
  lqv v0[e0],$20(a0) // $00: ACCUM HI
  vsar v8,v0,v0[e8]

  lqv v0[e0],$30(a0) // $30: V0
  lqv v1[e0],$40(a0) // $40: V1

  vmulf v0,v1[e0] // V0 += (V0 * V1[0]), Vector Multiply Accumulate Signed Fractions: VMACF VD,VS,VT[ELEMENT]

  sqv v0[e0],$00(a1) // 128-Bit DMEM $000(R0) = V0, Store Vector To Quad: SQV VT[ELEMENT],$OFFSET(BASE)

  vsar v0,v0[e10] // V0 = Vector Accumulator LO, Vector Accumulator Read: VSAR VD,VS,VT[ELEMENT]
  sqv v0[e0],$10(a1) // 128-Bit DMEM $030(R0) = V0, Store Vector To Quad: SQV VT[ELEMENT],$OFFSET(BASE)

  vsar v0,v0[e9] // V0 = Vector Accumulator MD, Vector Accumulator Read: VSAR VD,VS,VT[ELEMENT]
  sqv v0[e0],$20(a1) // 128-Bit DMEM $020(R0) = V0, Store Vector To Quad: SQV VT[ELEMENT],$OFFSET(BASE)

  vsar v0,v0[e8] // V0 = Vector Accumulator HI, Vector Accumulator Read: VSAR VD,VS,VT[ELEMENT]
  sqv v0[e0],$30(a1) // 128-Bit DMEM $010(R0) = V0, Store Vector To Quad: SQV VT[ELEMENT],$OFFSET(BASE)

  li t0,0
  cfc2 t0,vco   // T0 = RSP CP2 Control Register: VCO (Vector Carry Out)
  sw t0,$40(a1) // 16-Bit DMEM $040(R0) = T0
  li t0,0
  cfc2 t0,vcc   // T0 = RSP CP2 Control Register: VCC (Vector Compare Code)
  sw t0,$44(a1) // 16-Bit DMEM $042(R0) = T0
  li t0,0
  cfc2 t0,vce   // T0 = RSP CP2 Control Register: VCE (Vector Compare Extension)
  sw t0,$48(a1) //  8-Bit DMEM $044(R0) = T0

  break // Set SP Status Halt, Broke & Check For Interrupt, Set SP Program Counter To $0000
"""

[[test]]
name = "basic"
input = [
	0x0000_0000, 0x0000_0000, 0x0000_0000, 0x0000_0000,  # accum lo
	0x0000_0000, 0x0000_0000, 0x0000_0000, 0x0000_0000,  # accum md
	0x0000_0000, 0x0000_0000, 0x0000_0000, 0x0000_0000,  # accum hi

	0x1212_3434, 0x5656_7878, 0x9A9A_BCBC, 0xDEDE_F0F0,  # v0
	0xFDEC_BA98, 0x7654_3210, 0x0123_4567, 0x89AB_CDEF,  # v1
]
output = [
	0xffb5_e3b2, 0x4fd0_2f1e, 0xff19_db87, 0x1ea1_05e4,  # result

	0x6530_0dc0, 0x7070_6f00, 0xfa1c_b748, 0xd894_c020,  # accum lo
	0xffb5_e3b2, 0x4fd0_2f1e, 0xff19_db87, 0x1ea1_05e4,  # accum md
	0xffff_ffff, 0x0000_0000, 0xffff_ffff, 0x0000_0000,  # accum hi

	0x0000, 0x0000, 0x00,                                # vco, vcc, vce
	0x0, 											     # dummy
]
